#include "versus.h"

int main(){
  Setup();
  Display D;
  D.ShowInfo(players.size(), start);

  while(!GameOver){
    StartLeg();
    PlayLeg();
    if(!PlayAgain()){
      GameOver = true;
      D.ShowStats(players);
      //EndGame();
    }
    RotatePlayers();

  }
  
 
  return 0;
}

void Setup(){
  system("clear");

  GameOver = false;
  leg=0;
  
  // setup number of players
  int nr_player;
  std::cout << "\033[1;32m [setup] \033[0m number of players: ";
  std::cin >> nr_player;
  std::cout << std::endl;

  // Name every player
  std::string name_temp;
  for(unsigned int i=0; i<nr_player; ++i){
    player player_temp;
    players.push_back(player_temp);
    std::cout << "\033[1;32m [setup] \033[0m name player "<< i+1 <<": ";
    std::cin >> name_temp;
    std::cout << std::endl;
    players[i].Name = name_temp;
  }

  // setup start score
  std::cout << "\033[1;32m [setup] \033[0m Please set your start score: ";
  std::cin >> start;
  std::cout << std::endl;
  for(unsigned int i=0; i<players.size(); i++){
    players[i].LegsWon = 0;
    players[i].AverageTotal = 0;
    players[i].ScoreLeft = start;
  }
  return;
}

void StartLeg(){
  leg++;
  for(unsigned int i=0; i<players.size(); i++){
    std::vector<int> v;    // dummy to make Scores Vector the correct size
    players[i].Scores.push_back(v);
    players[i].AverageLeg.push_back(0);
    players[i].ScoreLeft = start;
  }
  return;
}
  

void ThrowDarts(player *p){
  //show display here
  int points;
  std::cout << "\033[1;32m [Round "<< p->Scores[leg-1].size()+1 << "] \033[0m " << p->Name << ": ";
  std::cin >> points;

  // player cannot score more than 180
  if(points > 180){
    while(points > 180){
      std::cout << "\033[1;31m [error] \033[0m you can not score more than 180 points, try again: ";      std::cin >> points;
    }
  }

  if(points > p->ScoreLeft){
    std::cout << "\033[1;32m [info] \033[0m you can not end below 0, score is reset to: " << p->ScoreLeft << std::endl;
  }
  else{
    p->ScoreLeft -= points;
    p->Scores[leg-1].push_back(points);
    p->AverageLeg[leg-1] = AverageLeg(p->Scores, leg);
    p->AverageTotal = AverageTotal(p->Scores);
  }
  return;
}

double AverageLeg(std::vector< std::vector<int> > vec, int leg){
  double sum = 0;
  double entries = 0;
  for(unsigned int j=0; j<vec[leg-1].size(); j++){
    sum += vec[leg-1][j];
    entries++;
  }
  double average = sum/entries;
  return average;
}

double AverageTotal(std::vector< std::vector<int> > vec){
  double sum = 0;
  double entries = 0;
  for(unsigned int i=0; i<vec.size(); i++){
    for(unsigned int j=0; j<vec[i].size(); j++){
      sum += vec[i][j];
      entries++;
    }
  }
  double average = sum/entries;
  return average;
}


bool PlayAgain(){
  std::string rematch;
  std::cout << "\033[1;32m [info] \033[0m do you want to play another leg? (y/n): ";
  std::cin >> rematch;
  if(rematch == "y") return true;
  else return false;
}

void PlayLeg(){
  bool play = true;
  Display D;
  while(play){
    for(unsigned int i=0; i<players.size(); i++){
      system("clear");
      D.RoundStart(players[0].Scores[leg-1].size() + 1);
      D.Standing(players,i);
      std::cout << std::endl << std::endl << std::endl;
      ThrowDarts(&players[i]);
      if(players[i].ScoreLeft == 0){
	players[i].LegsWon++;
	system("clear");
	D.RoundStart(players[0].Scores[leg-1].size());
	D.Standing(players,i);
	D.LegWon(players[i].Name);
	return;
      }
    }
  }
}

void RotatePlayers(){
  players.insert (players.begin(), players.back());
  players.erase(players.end());
  return;
}
